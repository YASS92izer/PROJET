import customtkinter as ctk
from gestionnaire import GestionnaireBilanSanguin
from info import ArbreVisualisateur
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from saisie_donnees import SaisieDonnees
from mail import EmailEnvoi
from rapport_pdf import RapportPDF
from tkinter import messagebox, filedialog
from datetime import datetime
from PIL import Image, ImageTk


class ScrollableFrame(ctk.CTkScrollableFrame):
    def __init__(self, container, **kwargs):
        super().__init__(container, **kwargs)
        self.grid_columnconfigure(0, weight=1)

class App(ctk.CTkFrame):
    def __init__(self, parent, patient_data=None):
        super().__init__(parent)
        
        
        self.COLORS = {
            'primary': "#042C54",     
            'secondary': "#E3F2FD",   
            'accent': "#2CBEC3",      
            'hover': "#3E5A6A",      
            'background': "#FFFFFF",  
            'text': "#2B2B2B",       
        }

        self.gestionnaire = GestionnaireBilanSanguin()
        self.patient_connecte = patient_data
        
        if patient_data:
            self.patient_id = patient_data['PatientID']
        else:
            self.patient_id = None
            
        self.arbre_visualisateur = ArbreVisualisateur()

        
        self.menu_window = None

        # Cr√©ation des cat√©gories
        self.categories = {
            'hematologie': 'H√©matologie',
            'biochimie': 'Biochimie',
            'lipides': 'Lipides',
            'enzymes': 'Enzymes',
            'ionogramme': 'Ionogramme',
            'autres': 'Autres'
        }

        # Frame principal conteneur
        self.main_container = ctk.CTkFrame(self, fg_color=self.COLORS['background'])
        self.main_container.pack(fill="both", expand=True)

        # En-t√™te avec informations utilisateur
        self.create_header()

        # Menu principal
        self.create_menu()

        # Frame principal pour le contenu
        self.main_frame = ScrollableFrame(
            self.main_container,
            fg_color=self.COLORS['background'],
            corner_radius=0
        )
        self.main_frame.pack(fill="both", expand=True, padx=20, pady=20)

        # Label initial
        self.label_instructions = ctk.CTkLabel(
            self.main_frame,
            text="S√©lectionnez une option dans le menu",
            font=("Arial", 14)
        )
        self.label_instructions.pack(pady=20)

    def create_header(self):
        # Frame d'en-t√™te
        header_frame = ctk.CTkFrame(
            self.main_container,
            fg_color=self.COLORS['primary'],
            height=60,
            corner_radius=0
        )
        header_frame.pack(fill="x", pady=0)
        header_frame.pack_propagate(False)

        
        ctk.CTkLabel(
            header_frame,
            text="MediLabPro",
            font=("Helvetica", 24, "bold"),
            text_color="white"
        ).pack(side="left", padx=20)

        
        user_frame = ctk.CTkFrame(header_frame, fg_color="transparent")
        user_frame.pack(side="right", padx=20)

        if self.patient_connecte:
            username = self.patient_connecte.get('Username', 'Utilisateur')
            ctk.CTkLabel(
                user_frame,
                text=f"üë§ {username}",
                font=("Helvetica", 14),
                text_color="white"
            ).pack(side="right", padx=10)

    def create_menu(self):
        # Frame du menu
        menu_frame = ctk.CTkFrame(
            self.main_container,
            fg_color="white",
            height=75
        )
        menu_frame.pack(fill="x", pady=0)
        menu_frame.pack_propagate(False)

        # Container pour centrer les boutons
        button_container = ctk.CTkFrame(menu_frame, fg_color="transparent")
        button_container.pack(expand=True, pady=15)

        
        self.resultats_btn = self.create_menu_button(button_container, {
            'text': "üìä Derniers R√©sultats",
            'command': self.afficher_tous_etats,
            'icon': "üìä"
        })

        self.arbre_btn = self.create_menu_button(button_container, {
            'text': "üîç Liens Maladies",
            'command': self.afficher_arbre_maladies,
            'icon': "üîç"
        })

        self.compare_btn = self.create_menu_button(button_container, {
            'text': "üìà Comparer Analyses",
            'command': lambda: self.show_graph_menu(None),
            'icon': "üìà"
        })

        self.saisie_btn = self.create_menu_button(button_container, {
            'text': "‚ûï Nouveau Bilan",
            'command': self.ouvrir_saisie_donnees,
            'icon': "‚ûï"
        })

        self.email_btn = self.create_menu_button(button_container, {
            'text': "üìß Envoyer Email",
            'command': self.ouvrir_email_frame,
            'icon': "üìß"
        })

        self.rapport_btn = self.create_menu_button(button_container, {
            'text': "üìë G√©n√©rer PDF",
            'command': self.generer_rapport_pdf,
            'icon': "üìë"
        })

    def create_menu_button(self, parent, config):
        button_frame = ctk.CTkFrame(parent, fg_color="transparent")
        button_frame.pack(side="left", padx=10)

        btn = ctk.CTkButton(
            button_frame,
            text=config['text'],
            command=config['command'],
            font=("Helvetica", 13),
            fg_color=self.COLORS['primary'],
            hover_color=self.COLORS['hover'],
            corner_radius=10,
            height=40,
            width=160,
            border_width=2,
            border_color=self.COLORS['accent']
        )
        btn.pack()

        
        def on_enter(e):
            btn.configure(fg_color=self.COLORS['hover'])

        def on_leave(e):
            btn.configure(fg_color=self.COLORS['primary'])

        btn.bind('<Enter>', on_enter)
        btn.bind('<Leave>', on_leave)
        
        return btn  
        
    def show_graph_menu(self, e):
        # Fermer le menu pr√©c√©dent s'il existe
        if self.menu_window is not None:
            self.menu_window.destroy()
            self.menu_window = None
            return

        # Cr√©er une nouvelle fen√™tre pour le menu
        self.menu_window = ctk.CTkToplevel(self)
        self.menu_window.overrideredirect(True)
        self.menu_window.attributes('-topmost', True)
        
        
        self.menu_window.configure(fg_color=self.COLORS['primary'])
        
        
        menu_frame = ctk.CTkFrame(
            self.menu_window,
            fg_color=self.COLORS['primary'],
            corner_radius=15,
        )
        menu_frame.pack(expand=True, fill="both", padx=2, pady=2)

        # Titre du menu d√©roulant
        ctk.CTkLabel(
            menu_frame,
            text="Choisir une cat√©gorie",
            font=("Helvetica", 14, "bold"),
            text_color="white"
        ).pack(pady=(10, 5))

        
        for cat_key, cat_name in self.categories.items():
            btn = ctk.CTkButton(
                menu_frame,
                text=cat_name,
                font=("Helvetica", 13),
                fg_color="transparent",
                hover_color=self.COLORS['hover'],
                corner_radius=8,
                height=35,
                width=140,
                border_width=1,
                border_color=self.COLORS['accent'],
                command=lambda c=cat_key: self.menu_button_click(c)
            )
            btn.pack(padx=10, pady=4)

        # Positionnement du menu
        button_pos = self.compare_btn.winfo_rootx(), self.compare_btn.winfo_rooty()
        menu_x = button_pos[0]
        menu_y = button_pos[1] + self.compare_btn.winfo_height() + 5
        self.menu_window.geometry(f"+{menu_x}+{menu_y}")

        # Gestion de la fermeture
        self.menu_window.bind('<FocusOut>', lambda e: self.close_menu())
        self.menu_window.focus_set()

    def close_menu(self):
        if self.menu_window:
            self.menu_window.destroy()
            self.menu_window = None

    def menu_button_click(self, category):
        if self.menu_window:
            self.menu_window.destroy()
            self.menu_window = None
        self.afficher_graphique(category)

    def on_closing(self):
        if self.menu_window:
            self.menu_window.destroy()
        self.destroy()

    def get_status_color(self, statut):
        colors = {
            "Trop basse": self.COLORS['accent'],
            "Trop √©lev√©e": "#FB9488",   
            "Proche de la limite": "#FF9F43",  
            "Bonne": "#00B386"               
        }
        return colors.get(statut, "white")

    def afficher_message(self, message, is_error=False):
        # Nettoyer l'affichage actuel
        for widget in self.main_frame.winfo_children():
            widget.destroy()

        message_frame = ctk.CTkFrame(
            self.main_frame,
            fg_color=self.COLORS['background']
        )
        message_frame.pack(expand=True)

        icon = "‚ùå" if is_error else "‚ÑπÔ∏è"
        color = "#FB9488" if is_error else self.COLORS['primary']

        ctk.CTkLabel(
            message_frame,
            text=f"{icon} {message}",
            font=("Helvetica", 14),
            text_color=color
        ).pack(pady=20)
        
    def afficher_tous_etats(self):
        # Nettoyer l'affichage actuel
        for widget in self.main_frame.winfo_children():
            widget.destroy()

        # R√©cup√©rer le dernier bilan
        bilans = self.gestionnaire.obtenir_bilan_p(self.patient_id)
        if bilans.empty:
            self.afficher_message("Aucun bilan disponible", True)
            return

        dernier_bilan = bilans.iloc[-1]
        descriptions = self.get_descriptions()

        
        header_frame = ctk.CTkFrame(
            self.main_frame,
            fg_color=self.COLORS['primary'],
            corner_radius=15
        )
        header_frame.pack(fill="x", pady=(0, 20))

        ctk.CTkLabel(
            header_frame,
            text=f"R√©sultats du bilan sanguin du {dernier_bilan['Date']}",
            font=("Helvetica", 16, "bold"),
            text_color="white"
        ).pack(pady=15)

        
        grid_container = ctk.CTkFrame(
            self.main_frame,
            fg_color=self.COLORS['background']
        )
        grid_container.pack(fill="both", expand=True, padx=5, pady=5)

        
        for i in range(3):
            grid_container.grid_columnconfigure(i, weight=1)

        # Param√®tres pour chaque cat√©gorie
        parametres = {
            'hematologie': ['Globules Rouges', 'H√©moglobine', 'Globules Blancs', 'Plaquettes'],
            'biochimie': ['Glyc√©mie √† jeun', 'Cr√©atinine', 'Ur√©e', 'Fer', 'Ferritine'],
            'lipides': ['Cholest√©rol Total', 'HDL', 'LDL', 'Triglyc√©rides'],
            'enzymes': ['ASAT', 'ALAT', 'Gamma GT'],
            'ionogramme': ['Sodium', 'Potassium', 'Chlore'],
            'autres': ['Bilirubine', 'CRP', 'TSH']
        }

        # Cr√©er les tableaux dans une grille 2x3
        for idx, (cat_key, cat_name) in enumerate(self.categories.items()):
            # Calculer la position dans la grille (2 lignes, 3 colonnes)
            row = idx // 3  # 0 pour les 3 premiers, 1 pour les 3 derniers
            col = idx % 3   # 0, 1, 2 pour chaque ligne

            
            cat_frame = ctk.CTkFrame(
                grid_container,
                fg_color="white",
                corner_radius=15,
                border_width=2,
                border_color=self.COLORS['accent']
            )
            cat_frame.grid(row=row, column=col, padx=5, pady=5, sticky="nsew")

            
            cat_header = ctk.CTkFrame(
                cat_frame,
                fg_color=self.COLORS['primary'],
                corner_radius=12
            )
            cat_header.pack(fill="x", padx=2, pady=2)

            ctk.CTkLabel(
                cat_header,
                text=cat_name,
                font=("Helvetica", 14, "bold"),
                text_color="white"
            ).pack(pady=8)

            
            table_frame = ctk.CTkFrame(cat_frame, fg_color="white")
            table_frame.pack(fill="both", expand=True, padx=10, pady=10)

            
            headers = ["Param√®tre", "Valeur", "R√©f.", "Statut", "Info"]
            for col_idx, header in enumerate(headers):
                ctk.CTkLabel(
                    table_frame,
                    text=header,
                    font=("Helvetica", 12, "bold"),
                    text_color=self.COLORS['primary']
                ).grid(row=0, column=col_idx, padx=5, pady=5, sticky="w")

            
            for row_idx, param in enumerate(parametres[cat_key], 1):
                
                ctk.CTkLabel(
                    table_frame,
                    text=param,
                    font=("Helvetica", 12),
                    text_color=self.COLORS['text']
                ).grid(row=row_idx, column=0, padx=5, pady=3, sticky="w")

                # Valeur
                valeur = dernier_bilan[param]
                ctk.CTkLabel(
                    table_frame,
                    text=f"{valeur:.1f}",
                    font=("Helvetica", 12)
                ).grid(row=row_idx, column=1, padx=5, pady=3)

                # √âvaluation
                resultat = self.gestionnaire.evaluer_valeur(valeur, dernier_bilan['Sexe'], param)
                
                # R√©f√©rences
                ref_text = f"{resultat['min']}-{resultat['max']}"
                ctk.CTkLabel(
                    table_frame,
                    text=ref_text,
                    font=("Helvetica", 12)
                ).grid(row=row_idx, column=2, padx=5, pady=3)

                # Statut
                status_label = ctk.CTkLabel(
                    table_frame,
                    text=resultat['statut'],
                    text_color=self.get_status_color(resultat['statut']),
                    font=("Helvetica", 12, "bold")
                )
                status_label.grid(row=row_idx, column=3, padx=5, pady=3)

                # Bouton Info
                info_button = ctk.CTkButton(
                    table_frame,
                    text="‚Ñπ",
                    width=30,
                    height=25,
                    fg_color=self.COLORS['primary'],
                    hover_color=self.COLORS['hover'],
                    corner_radius=8,
                    command=lambda p=param, d=descriptions.get(param, ""): 
                        self.afficher_description_popup(p, d)
                )
                info_button.grid(row=row_idx, column=4, padx=5, pady=3)

            
            for i in range(5):
                table_frame.grid_columnconfigure(i, weight=1)

    def afficher_description_popup(self, param, description):
        # Cr√©er une nouvelle fen√™tre popup
        popup = ctk.CTkToplevel(self)
        popup.title(f"Information sur {param}")
        popup.geometry("400x200")
        
        
        popup.transient(self)
        popup.grab_set()
        
        
        popup.configure(fg_color="#ffffff")  
        
        
        label = ctk.CTkLabel(
            popup,
            text=description,
            wraplength=350,
            font=("Arial", 12),
            justify="left",
            text_color="#042C54"
        )
        label.pack(padx=20, pady=20, expand=True, fill="both")
        
        
        btn = ctk.CTkButton(
            popup,
            text="Fermer",
            command=popup.destroy,
            fg_color="#042C54",
            hover_color="#3E5A6A",
            border_color="#2CBEC3",
            border_width=1,
            corner_radius=8
        )
        btn.pack(pady=10)

    

    def ouvrir_saisie_donnees(self):
        saisie = SaisieDonnees(self.main_frame, self.gestionnaire, self.patient_connecte)
        saisie.ouvrir_saisie()

    def ouvrir_email_frame(self):
        email_frame = EmailEnvoi(self.main_frame, self.gestionnaire, self.patient_connecte)
        email_frame.ouvrir_email()

    def generer_rapport_pdf(self):
        try:
            bilans = self.gestionnaire.obtenir_bilan_p(self.patient_id)
            if bilans.empty:
                self.afficher_message("Aucun bilan disponible", True)
                return

            filename = filedialog.asksaveasfilename(
                defaultextension=".pdf",
                initialfile=f"rapport_medical_{self.patient_connecte['Username']}_{datetime.now().strftime('%Y%m%d')}.pdf",
                title="Enregistrer le rapport PDF",
                filetypes=[("PDF files", "*.pdf")]
            )
            
            if filename:
                
                progress_frame = ctk.CTkFrame(
                    self.main_frame,
                    fg_color=self.COLORS['background']
                )
                progress_frame.pack(expand=True)

                progress = ctk.CTkProgressBar(
                    progress_frame,
                    mode='indeterminate',
                    progress_color=self.COLORS['accent']
                )
                progress.pack(pady=20)
                progress.start()
                
                status_label = ctk.CTkLabel(
                    progress_frame,
                    text="üìä G√©n√©ration du rapport en cours...",
                    font=("Helvetica", 14),
                    text_color=self.COLORS['primary']
                )
                status_label.pack(pady=10)
                
                self.update()

                generateur_pdf = RapportPDF(self.gestionnaire)
                dernier_bilan = bilans.iloc[-1].to_dict()
                generateur_pdf.generer_rapport(self.patient_connecte, dernier_bilan, filename)

                progress.stop()
                progress_frame.destroy()

                if messagebox.askyesno(
                    "Rapport g√©n√©r√©",
                    "Le rapport a √©t√© g√©n√©r√© avec succ√®s. Voulez-vous l'ouvrir maintenant ?"
                ):
                    import os
                    os.startfile(filename)

        except Exception as e:
            self.afficher_message(f"Erreur lors de la g√©n√©ration du rapport : {str(e)}", True)
            
    
        
    def get_descriptions(self):
        return {
            'Globules Rouges': "Transportent l'oxyg√®ne dans le sang. Un taux trop bas (an√©mie) peut causer fatigue, essoufflement et p√¢leur. Un taux trop √©lev√© peut indiquer une maladie du sang ou augmenter le risque de caillots sanguins.",
            'H√©moglobine': "Prot√©ine dans les globules rouges qui transporte l'oxyg√®ne. Un taux bas indique une an√©mie (fatigue, essoufflement, vertiges). Un taux √©lev√© peut √™tre li√© √† un manque d'oxyg√®ne (altitude, tabac) ou √† une maladie du sang.",
            'Globules Blancs': "Cellules de d√©fense du corps. Un taux √©lev√© peut signaler une infection, une inflammation ou une leuc√©mie. Un taux trop bas peut indiquer une faiblesse du syst√®me immunitaire ou un probl√®me de moelle osseuse.",
            'Plaquettes': "Aident √† la coagulation du sang. Un taux bas peut provoquer des saignements. Un taux √©lev√© augmente le risque de formation de caillots pouvant entra√Æner des AVC ou des thromboses.",
            'Glyc√©mie √† jeun': "Mesure le sucre dans le sang apr√®s plusieurs heures sans manger. Un taux √©lev√© peut signaler un diab√®te ou un pr√©diab√®te. Un taux trop bas (hypoglyc√©mie) peut causer vertiges, sueurs et perte de connaissance.",
            'Cholest√©rol Total': "Graisse dans le sang. Un taux √©lev√© augmente le risque de maladies cardiovasculaires. Un taux trop bas est rare mais peut √™tre li√© √† certaines maladies ou carences.",
            'HDL': "Bon cholest√©rol. Prot√®ge le c≈ìur en √©liminant le mauvais cholest√©rol. Un taux bas augmente le risque cardiovasculaire. Un taux √©lev√© est b√©n√©fique.",
            'LDL': "Mauvais cholest√©rol. Un taux trop √©lev√© favorise les d√©p√¥ts dans les art√®res (plaques) et augmente les risques d'infarctus ou AVC. Un taux bas est pr√©f√©rable.",
            'Triglyc√©rides': "Type de graisses. Un taux √©lev√© peut indiquer un risque cardiovasculaire accru, souvent li√© √† une mauvaise alimentation. Un taux tr√®s bas peut √™tre observ√© en cas de malnutrition.",
            'ASAT': "Enzyme pr√©sente dans le foie, le c≈ìur et les muscles. Un taux √©lev√© peut signaler des atteintes h√©patiques, musculaires ou cardiaques. Un taux normal est rassurant.",
            'ALAT': "Enzyme surtout produite par le foie. Un taux √©lev√© est un signe sp√©cifique de souffrance h√©patique (h√©patite, m√©dicaments, alcool).",
            'Gamma GT': "Enzyme du foie. Un taux √©lev√© peut √™tre d√ª √† l'alcool, √† certains m√©dicaments ou √† un probl√®me des voies biliaires.",
            'Bilirubine': "Pigment issu de la d√©gradation des globules rouges. Un taux √©lev√© peut causer un jaunissement de la peau (jaunisse) et signaler un probl√®me h√©patique ou une destruction excessive des globules rouges.",
            'Cr√©atinine': "D√©chet filtr√© par les reins. Un taux √©lev√© indique un mauvais fonctionnement r√©nal. Un taux trop bas est rare et g√©n√©ralement sans gravit√©.",
            'Ur√©e': "R√©sidu du m√©tabolisme des prot√©ines, √©limin√© par les reins. Un taux √©lev√© peut indiquer une insuffisance r√©nale ou une d√©shydratation. Un taux bas peut refl√©ter une alimentation pauvre en prot√©ines.",
            'Sodium': "√âlectrolyte essentiel √† l'hydratation et √† la transmission nerveuse. Un taux trop bas (hyponatr√©mie) peut provoquer fatigue, naus√©es, confusion. Un taux trop √©lev√© (hypernatr√©mie) peut indiquer une d√©shydratation.",
            'Potassium': "√âlectrolyte vital pour le c≈ìur et les muscles. Un taux trop bas (hypokali√©mie) peut causer fatigue, crampes, troubles du rythme cardiaque. Un taux trop √©lev√© (hyperkali√©mie) peut provoquer une faiblesse musculaire.",
            'Chlore': "√âlectrolyte qui aide √† √©quilibrer les liquides et l'acidit√© du corps. Un taux trop bas ou trop √©lev√© peut entra√Æner des d√©s√©quilibres acido-basiques, avec fatigue, confusion ou troubles respiratoires.",
            'CRP': "Prot√©ine produite lors d'une inflammation. Un taux √©lev√© signale une infection, une inflammation chronique ou une maladie auto-immune. Un taux bas est normal.",
            'TSH': "Hormone qui contr√¥le la thyro√Øde. Un taux √©lev√© indique souvent une hypothyro√Ødie (ralentissement du m√©tabolisme). Un taux bas peut signaler une hyperthyro√Ødie (acc√©l√©ration du m√©tabolisme).",
            'Fer': "Min√©ral indispensable pour fabriquer l'h√©moglobine. Un taux faible peut entra√Æner une an√©mie. Un taux trop √©lev√© peut signaler une surcharge en fer (h√©mochromatose).",
            'Ferritine': "Prot√©ine qui stocke le fer. Un taux bas refl√®te des r√©serves faibles (carence). Un taux √©lev√© peut indiquer une inflammation, une surcharge en fer ou une maladie chronique."
        }

    

    def afficher_arbre_maladies(self):
        # Nettoyer l'affichage actuel
        for widget in self.main_frame.winfo_children():
            widget.destroy()
        
        # Afficher l'arbre dans le main_frame
        self.arbre_visualisateur.afficher_arbres(self.main_frame)
        
    def afficher_graphique(self, categorie):
        # Nettoyer l'affichage actuel
        for widget in self.main_frame.winfo_children():
            widget.destroy()

        
        title_frame = ctk.CTkFrame(
            self.main_frame,
            fg_color=self.COLORS['primary'],
            corner_radius=15
        )
        title_frame.pack(fill="x", pady=(0, 20))

        ctk.CTkLabel(
            title_frame,
            text=f"√âvolution des param√®tres - {self.categories[categorie]}",
            font=("Helvetica", 16, "bold"),
            text_color="white"
        ).pack(pady=15)

        # Frame conteneur pour le graphique
        graph_container = ctk.CTkFrame(
            self.main_frame,
            fg_color="white",
            corner_radius=15,
            border_width=2,
            border_color=self.COLORS['accent']
        )
        graph_container.pack(fill="both", expand=True, padx=5, pady=5)

        fig = self.gestionnaire.creer_graphique_comparaison(self.patient_id, categorie)
        
        if fig:
            
            fig.set_size_inches(16, 10)  
            
            
            fig.tight_layout(pad=3.0)
            
            
            canvas = FigureCanvasTkAgg(fig, master=graph_container)
            canvas.draw()
            
            # Configurer le widget canvas pour qu'il prenne tout l'espace disponible
            canvas_widget = canvas.get_tk_widget()
            canvas_widget.pack(fill="both", expand=True, padx=20, pady=20)
            
            # Mettre √† jour l'affichage
            self.update_idletasks()
        else:
            self.afficher_message(
                "Il faut au minimum 2 analyses pour effectuer une comparaison",
                True
            )

    def toggle_user_menu(self):
        """Affiche ou cache le menu utilisateur"""
        if self.user_menu is not None:
            self.user_menu.destroy()
            self.user_menu = None
            return
        
        # Cr√©er le menu d√©roulant
        self.user_menu = ctk.CTkToplevel(self)
        self.user_menu.overrideredirect(True)
        self.user_menu.attributes('-topmost', True)
        
        # Configuration du style
        self.user_menu.configure(fg_color=self.COLORS['primary'])
        
        # Frame principale du menu avec coins arrondis
        menu_frame = ctk.CTkFrame(
            self.user_menu,
            fg_color=self.COLORS['primary'],
            corner_radius=15,
        )
        menu_frame.pack(expand=True, fill="both", padx=2, pady=2)
        
        # Options du menu
        profile_btn = ctk.CTkButton(
            menu_frame,
            text="üë§ Profil",
            font=("Helvetica", 13),
            fg_color="transparent",
            hover_color=self.COLORS['hover'],
            corner_radius=8,
            height=35,
            width=130,
            border_width=1,
            border_color=self.COLORS['accent'],
            command=self.show_profile
        )
        profile_btn.pack(padx=10, pady=4)
        
        logout_btn = ctk.CTkButton(
            menu_frame,
            text="üö™ D√©connexion",
            font=("Helvetica", 13),
            fg_color="transparent",
            hover_color=self.COLORS['hover'],
            corner_radius=8,
            height=35,
            width=130,
            border_width=1,
            border_color=self.COLORS['accent'],
            command=self.logout
        )
        logout_btn.pack(padx=10, pady=4)
        
        # Positionnement du menu
        button_pos = self.user_button.winfo_rootx(), self.user_button.winfo_rooty()
        menu_x = button_pos[0]
        menu_y = button_pos[1] + self.user_button.winfo_height() + 5
        self.user_menu.geometry(f"+{menu_x}+{menu_y}")
        
        # Gestion de la fermeture
        self.user_menu.bind('<FocusOut>', lambda e: self.close_user_menu())
        self.user_menu.focus_set()

    def close_user_menu(self):
        """Ferme le menu utilisateur"""
        if self.user_menu:
            self.user_menu.destroy()
            self.user_menu = None

    def show_profile(self):
        """Affiche et permet de modifier le profil utilisateur"""
        self.close_user_menu()
        
        # Nettoyer l'affichage actuel
        for widget in self.main_frame.winfo_children():
            widget.destroy()
        
        
        title_frame = ctk.CTkFrame(
            self.main_frame,
            fg_color=self.COLORS['primary'],
            corner_radius=15
        )
        title_frame.pack(fill="x", pady=(0, 20))
        
        ctk.CTkLabel(
            title_frame,
            text="Mon Profil",
            font=("Helvetica", 16, "bold"),
            text_color="white"
        ).pack(pady=15)
        
        # Frame pour le formulaire de profil
        profile_frame = ctk.CTkFrame(
            self.main_frame,
            fg_color="white",
            corner_radius=15,
            border_width=2,
            border_color=self.COLORS['accent']
        )
        profile_frame.pack(fill="both", expand=True, padx=5, pady=5)
        
        
        content_frame = ctk.CTkFrame(profile_frame, fg_color="transparent")
        content_frame.pack(expand=True, pady=30)
        
        
        ctk.CTkLabel(
            content_frame,
            text="Nom d'utilisateur:",
            font=("Helvetica", 14, "bold"),
            text_color=self.COLORS['primary']
        ).grid(row=0, column=0, padx=20, pady=10, sticky="e")
        
        ctk.CTkLabel(
            content_frame,
            text=self.patient_connecte.get('Username', ''),
            font=("Helvetica", 14),
            text_color=self.COLORS['text']
        ).grid(row=0, column=1, padx=20, pady=10, sticky="w")
        
        
        ctk.CTkLabel(
            content_frame,
            text="ID Patient:",
            font=("Helvetica", 14, "bold"),
            text_color=self.COLORS['primary']
        ).grid(row=1, column=0, padx=20, pady=10, sticky="e")
        
        ctk.CTkLabel(
            content_frame,
            text=str(self.patient_connecte.get('PatientID', '')),
            font=("Helvetica", 14),
            text_color=self.COLORS['text']
        ).grid(row=1, column=1, padx=20, pady=10, sticky="w")
        
        
        ctk.CTkLabel(
            content_frame,
            text="√Çge:",
            font=("Helvetica", 14, "bold"),
            text_color=self.COLORS['primary']
        ).grid(row=2, column=0, padx=20, pady=10, sticky="e")
        
        self.age_entry = ctk.CTkEntry(
            content_frame,
            font=("Helvetica", 14),
            width=100,
            height=35,
            border_color=self.COLORS['primary'],
            corner_radius=8
        )
        self.age_entry.insert(0, str(self.patient_connecte.get('Age', '')))
        self.age_entry.grid(row=2, column=1, padx=20, pady=10, sticky="w")
        
        
        ctk.CTkLabel(
            content_frame,
            text="Sexe:",
            font=("Helvetica", 14, "bold"),
            text_color=self.COLORS['primary']
        ).grid(row=3, column=0, padx=20, pady=10, sticky="e")
        
        self.sexe_menu = ctk.CTkOptionMenu(
            content_frame,
            values=["Homme", "Femme"],
            font=("Helvetica", 14),
            width=150,
            height=35,
            fg_color=self.COLORS['primary'],
            button_hover_color=self.COLORS['hover'],
            corner_radius=8
        )
        self.sexe_menu.set(self.patient_connecte.get('Sexe', 'Homme'))
        self.sexe_menu.grid(row=3, column=1, padx=20, pady=10, sticky="w")
        
        
        self.profile_info = ctk.CTkLabel(
            content_frame,
            text="",
            font=("Helvetica", 12),
            text_color="#e74c3c"
        )
        self.profile_info.grid(row=4, column=0, columnspan=2, pady=10)
        
        
        save_btn = ctk.CTkButton(
            content_frame,
            text="Enregistrer les modifications",
            font=("Helvetica", 14, "bold"),
            fg_color=self.COLORS['primary'],
            hover_color=self.COLORS['hover'],
            corner_radius=10,
            height=40,
            width=250,
            command=self.save_profile
        )
        save_btn.grid(row=5, column=0, columnspan=2, pady=20)

    def save_profile(self):
        """Sauvegarde les modifications du profil"""
        try:
            # Valider l'√¢ge
            age_text = self.age_entry.get().strip()
            if not age_text.isdigit() or int(age_text) <= 0:
                self.profile_info.configure(text="‚ö†Ô∏è L'√¢ge doit √™tre un nombre entier positif.")
                return
            
            # Mise √† jour des donn√©es en m√©moire
            self.patient_connecte['Age'] = int(age_text)
            self.patient_connecte['Sexe'] = self.sexe_menu.get()
            
            # Mise √† jour du fichier CSV
            import csv
            import os
            
            temp_file = "temp_comptes.csv"
            found = False
            
            with open("comptes.csv", 'r', newline='', encoding='latin-1') as infile, \
                 open(temp_file, 'w', newline='', encoding='latin-1') as outfile:
                
                reader = csv.DictReader(infile)
                fieldnames = reader.fieldnames
                
                writer = csv.DictWriter(outfile, fieldnames=fieldnames)
                writer.writeheader()
                
                for row in reader:
                    if int(row['PatientID']) == self.patient_connecte['PatientID']:
                        row['Age'] = str(self.patient_connecte['Age'])
                        row['Sexe'] = self.patient_connecte['Sexe']
                        found = True
                    writer.writerow(row)
            
            # Remplacer l'ancien fichier par le nouveau
            os.replace(temp_file, "comptes.csv")
            
            if found:
                self.profile_info.configure(text="‚úÖ Profil mis √† jour avec succ√®s!", text_color="#2ecc71")
            else:
                self.profile_info.configure(text="‚ö†Ô∏è Utilisateur non trouv√© dans la base de donn√©es.")
                
        except Exception as e:
            self.profile_info.configure(text=f"‚ö†Ô∏è Erreur: {str(e)}")

    def logout(self):
        """D√©connecte l'utilisateur et retourne √† l'√©cran de connexion"""
        self.close_user_menu()
        
        # On retourne √† l'√©cran de connexion
        # On acc√®de au parent de niveau sup√©rieur (MainApplication)
        parent_app = self.winfo_toplevel()
        parent_app.show_login()

    def on_closing(self):
        if self.menu_window:
            self.menu_window.destroy()
        if hasattr(self, 'user_menu') and self.user_menu:
            self.user_menu.destroy()
        self.destroy()
        
    def create_header(self):
        
        header_frame = ctk.CTkFrame(
            self.main_container,
            fg_color=self.COLORS['primary'],
            height=60,
            corner_radius=0
        )
        header_frame.pack(fill="x", pady=0)
        header_frame.pack_propagate(False)

        
        logo_title_frame = ctk.CTkFrame(header_frame, fg_color="transparent")
        logo_title_frame.pack(side="left", padx=20)
        
        try:
            # Chargement du logo pour l'en-t√™te 
            logo_path = "logo1.png"  
            header_logo = ctk.CTkImage(
                light_image=Image.open(logo_path),
                dark_image=Image.open(logo_path),
                size=(40, 40)  
            )
            
            # Cr√©ation d'un label pour le logo
            logo_label = ctk.CTkLabel(
                logo_title_frame,
                image=header_logo,
                text=""
            )
            logo_label.pack(side="left", padx=(0, 10))
        
        except Exception as e:
            print(f"Erreur lors du chargement du logo d'en-t√™te: {e}")
        
        # Nom de l'application √† c√¥t√© du logo
        ctk.CTkLabel(
            logo_title_frame,
            text="MediLabPro",
            font=("Helvetica", 24, "bold"),
            text_color="white"
        ).pack(side="left")

        # Informations utilisateur
        user_frame = ctk.CTkFrame(header_frame, fg_color="transparent")
        user_frame.pack(side="right", padx=20)

        if self.patient_connecte:
            username = self.patient_connecte.get('Username', 'Utilisateur')
            
            
            self.user_button = ctk.CTkButton(
                user_frame,
                text=f"üë§ {username}",
                font=("Helvetica", 14),
                text_color="white",
                fg_color="transparent",
                hover_color=self.COLORS['hover'],
                corner_radius=8,
                command=self.toggle_user_menu
            )
            self.user_button.pack(side="right")
            
            # Variable pour tracker le sous-menu utilisateur
            self.user_menu = None
